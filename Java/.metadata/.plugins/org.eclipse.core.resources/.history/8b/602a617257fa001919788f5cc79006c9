import java.util.LinkedList;
import java.util.Queue;

public class GrafoNPND {
	private int n = 0; // número de vértices o nodos
	private int capacidad;
	private String nodos[];
	private int mat[][];

	public GrafoNPND() {
	}

//	constructor
	public GrafoNPND(int capacidad) {
		this.capacidad = capacidad;
		this.nodos = new String[capacidad];
		this.mat = new int[capacidad][capacidad];
	}

	// retorna tamaño del grafo *
	public int getCapacidad() {
		return this.capacidad;
	}

	// return numero de nodos existentes en el grafo*
	public int getNodosTotal() {
		return this.n;
	}

	// return true si el grafo es null *
	public boolean esNulo() {
		return n == 0;
	}

	// return true si el grafo esta lleno *
	public boolean estaLleno() {
		return capacidad == n;
	}

	// return false si existe aristas caso contrario true
	public boolean estaVacio() { // ver mas adelante
		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				if (mat[i][j] != 0)
					return false;
		return true;
	}

	// return false si el nodo no se inserto y true caso contrario *
	public boolean insertarNodo(String nombre) {
		if (capacidad == n)// revisar
			return false;
		else {
			nodos[n] = nombre;
			for (int i = 0; i < n; i++) {
				mat[i][n] = 0;
				mat[n][i] = 0;
			}
			n++;
			return true;
		}
	}

	// return true si el nodo existe *
	public boolean existeNodo(String nombre) {
		for (int i = 0; i < n; i++)
			if (nombre.toUpperCase().equals(nodos[i].toUpperCase()))
				return true;
		return false;
	}

	// return indice del un nodo *
	// y return -1 si no encuentra el nodo *
	public int indiceNodo(String nombre) {
		for (int i = 0; i < n; i++)
			if (nombre.toUpperCase().equals(nodos[i].toUpperCase()))
				return i;
		return -1;
		
	}
	
	// return el grafo y la matriz de aristas
	public String toString() {
		String cad = "";
		for (int i = 0; i < n; i++)
			cad = cad + nodos[i] + " ";
		cad = cad + "\n";
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++)
				cad = cad + mat[i][j] + " ";
			cad = cad + "\n";
		}
		cad = cad + "\n";
		return cad;
	}

	// return false si el nodo no existe
	// elimina un nodo o vertice y retrun true *
	public boolean eliminarNodo(String nombre) {
		if (!existeNodo(nombre))
			return false;
		else {
			int ind = indiceNodo(nombre);
			for (int i = 0; i < n; i++) {
				for (int j = ind; j < n - 1; j++) {
					mat[i][j] = mat[i][j + 1];
				}
			}
			for (int i = ind; i < n - 1; i++) {
				for (int j = 0; j < n; j++) {
					mat[i][j] = mat[i + 1][j];
				}
			}
			for (int i = ind; i < n - 1; i++)
				nodos[i] = nodos[i + 1];
			n--;
			return true;
		}
	}

	// inserta arco entre dos nodos y return true *
	// Caso contrario return false si no encuentra *
	// el nodo *

	public boolean insertarArco(String a, String b) {
		if (!existeNodo(a) || !existeNodo(b))
			return false;
		else {
			mat[indiceNodo(a)][indiceNodo(b)] = 1;
			mat[indiceNodo(b)][indiceNodo(a)] = 1;
			return true;
		}
	}

	// insertar codigo mio
//	public boolean insertarArco(String a, String b) {
//		if ( existeNodo(a) && existeNodo(b) ) {
//			mat[indiceNodo(a)][indiceNodo(b)] = 1;
//			mat[indiceNodo(b)][indiceNodo(a)] = 1;
//			return true;
//		}else 
//			return false;
//	}

	// elimina arco entre dos nodos y return true *
	// Caso contrario return false si no elimino *
	// el arco *
	public boolean eliminarArco(String a, String b) {
		if (!existeNodo(a) || !existeNodo(b))
			return false;
		else {
			mat[indiceNodo(a)][indiceNodo(b)] = 0;
			mat[indiceNodo(b)][indiceNodo(a)] = 0;
			return true;
		}
	}

	// elimina un Nodo y retorna true *
	// caso contrario devuelve false *
	public boolean renombrarNodo(String viejo, String nuevo) {
		if (!existeNodo(viejo))
			return false;
		else {
			nodos[indiceNodo(viejo)] = nuevo;
			return true;
		}
	}

	// return array de nodos enlazados con otro nodo pasado por parametro *
	public LinkedList nodosAdyascentes(String nodo) {
		LinkedList l = new LinkedList();
		for (int i = 0; i < n; i++) {
			if (i != indiceNodo(nodo) && mat[indiceNodo(nodo)][i] == 1)
				l.add(nodos[i]);
		}
		return l;
	}

	public LinkedList amplitud(String nodo) {
		LinkedList aux = new LinkedList(); 
		if (existeNodo(nodo)) {
			boolean visitados[] = new boolean[n];
			Queue cola = new LinkedList();
			cola.offer(nodo);
			visitados[indiceNodo(nodo)] = true;
			while (!cola.isEmpty()) { // isEmpty return true sy la cola esta vacia
				nodo = (String) cola.poll();
				aux.add(nodo);
				System.out.println(nodo);
				LinkedList l = nodosAdyascentes(nodo);
				while (!l.isEmpty()) {
					nodo = (String) l.remove(0);
					if (!visitados[indiceNodo(nodo)]) {
						cola.offer(nodo);
						visitados[indiceNodo(nodo)] = true;
					}
				}
			}
		}
		return aux;
	}
	
	
	public void conexo() {
		boolean sal = true;
		for (String it : nodos) {
			System.out.println(amplitud(it));
			if( amplitud(it).size()!= getNodosTotal() ) {
				sal = false;
			}
		}
		return sal;
	}

}


















